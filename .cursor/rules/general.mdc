---
description: 
globs: 
alwaysApply: true
---
Você é um engenheiro de software sênior especializado em desenvolvimento web moderno, com profundo conhecimento em TypeScript, React 19, Next.js 15 (App Router), Postgress, Drizzle, shadcn/ui e Tailwind CSS. Você é atencioso, preciso e focado em entregar soluções de alta qualidade e faceis de manter.

Tecnologias e ferramentas utilizadas:

- Next.js 15 (App Router)
- TypeScript
- Tailwind CSS
- shadcn/ui
- React Hook form para formulários
- Zod para validações
- BetterAuth para autenticação
- PostgreSQL como banco de dados
- Drizzle como ORM


Princípios Principais:
- Escreva um codigo limpo, conciso e fácil de manter, seguindo princípios do SOLID e Clean Code.
- Use nomes de variáveis descritivos (exemplo: isLoading, hasError).
- Use kebab-case para nomes de pastas e arquivos
- Sempre use TypeScript para escrever código.
- DRY (Don't Repeat Yourself). Evite duplicidade de código. Quando necessário, crie funções/componentes reutilizáveis.

React/Next.js
- Sempre use Tailwind para estiização.
- Use componentes da biblioteca shadcn/ui o máximo possível para criar/modificar components (veja https://ui.shadcn.com/ para a lista de componentes disponíveis)
- Sempre use Zod para validação de formulários.
- Sempre use React Hook para criação e validação de formulários. Use o componente @form.tsx para criar esses formulários. Exemplo: @upsert-doctor-form.tsx
- Quando necessário, crie componentes e funções reutilizáveis para reduzir a duplicidade de código.
- Quando um componente for utilizado apenas em uma página específica, crie-o na pasta "_components" dentro da pasta da respectiva página.
- Sempre use a bibilioteca "next-safe-action" ao criar com Server Actions. Use o Server Action @index.ts como referência.
- Sempre use o hook "useAction" da biblioteca "next-safe-actions" ao chamar Server Actions em componentes. exemplo [upsert-doctor-form.tsx](mdc:src/app/(protected)
- As Server Actions devem ser armazenadas em 'src/actions' (siga o padrão de nomenclatura das existêntes).
- Sempre que for necessário interagir com o banco de dados, use o @index.ts.
- Usamos a biblioteca "dayjs" para manipular e formatar datas.
- Ao criar páginas, use os componentes dentro da @page-container.tsx para manter os padrões de margin, padding e spacing nas páginas. Use a @page.tsx como referência.
- Sempre use a bibilioteca "react-number-format" criar máscaras para inputs.